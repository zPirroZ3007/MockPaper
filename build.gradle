plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

repositories {
    mavenCentral()

    maven {
        url 'https://hub.spigotmc.org/nexus/content/repositories/public/'
    }

    maven {
        url 'https://repo.md-5.net/content/groups/public/'
    }

    maven {
        url 'https://repo.papermc.io/repository/maven-public/'
    }
}

dependencies {
    api "com.destroystokyo.paper:paper-api:${gradle.ext.apiVersionFull}"
    implementation "fastutil:fastutil:5.0.5"
    implementation 'org.junit.jupiter:junit-jupiter:5.7.1'
    implementation 'org.hamcrest:hamcrest-library:1.3'
    implementation 'org.apache.commons:commons-io:1.3.2'
    implementation 'org.jetbrains:annotations:19.0.0'
}

task javadocJar(type: Jar) {
    classifier('javadoc')
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier('sources')
    from sourceSets.main.allSource
}

tasks.withType(JavaCompile) {
    Provider<JavaCompiler> compilerProvider = javaToolchains.compilerFor {
        JavaLanguageVersion.of(11)
    }
    JavaCompiler compiler = compilerProvider.orNull

    if (compiler != null && compiler.metadata.languageVersion.asInt() > 9) {
        // Mark release as 8 if the compiler is Java 10 or newer
        options.release.set(11)
    } else {
        // Only use the legacy compiler options otherwise
        sourceCompatibility = 11
        targetCompatibility = 11
    }
}

artifacts {
    archives javadocJar, sourcesJar
}

def isFork = isFork()

signing {
    required { !isFork && System.getenv('JITPACK') == null }
    sign publishing.publications
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

jacoco {
    toolVersion = "0.8.6"
}

group = 'com.github.seeseemelk'
version = "1.0-SNAPSHOT"

publishing {
    publications {
        library(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url = uri("https://repo.tecnocraft.net/repository/public/")
            credentials {
                username = "user"
                password = "$System.env.NEXUS_PASS"
            }
        }
    }
}

test {
    useJUnitPlatform()
}

eclipse.classpath.downloadJavadoc = true
eclipse.classpath.downloadSources = true

def isFork() {
    try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git config --get remote.origin.url'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            return !result.text.contains("MockBukkit/MockBukkit")
        }
    } catch (e) {
    }
    return true
}
